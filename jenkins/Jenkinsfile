pipeline {
    agent {
        label 'docker-agent'
    }

    triggers {
        pollSCM('H/3 * * * *')
    }

    environment {
        CORS = credentials('CORS')
        JWT_SECRET_KEY = credentials('JWT_SECRET_KEY')

        DB_HOST = credentials('DB_HOST')
        DB_PORT = 5432
        DB_NAME = "lmkp"
        DB_USERNAME = credentials('DB_USERNAME')
        DB_PASSWORD = credentials('DB_PASSWORD')

        TEST_DB_HOST = credentials('TEST_DB_HOST')
        TEST_DB_PORT = 5432
        TEST_DB_NAME = "test"
        TEST_DB_USERNAME = credentials('TEST_DB_USERNAME')
        TEST_DB_PASSWORD = credentials('TEST_DB_PASSWORD')

        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        GITHUB_REPO = 'Nailuu/LetzMarketplaceAPI'
        RELEASE_TAG = "v1.0.${env.BUILD_NUMBER}"
        RELEASE_NAME = "Release v1.0.${env.BUILD_NUMBER}"
        RELEASE_BODY = "Automated release created by Jenkins pipeline."
        JAR_FILE_PATH = "target/rest-api-${env.BUILD_NUMBER}.jar"
    }

    stages {
        stage('Build') {
            steps {
                withMaven {
                    sh 'mvn --version'
                    sh 'mvn -B -DskipTests -Drevision=1.0.$BUILD_NUMBER clean package'
                }
            }
        }

        stage('Database Migration') {
            steps {
                sh 'flyway -v'

                echo 'Cleaning database schemas...'
                sh '''
                flyway -url=jdbc:postgresql://$TEST_DB_HOST:$TEST_DB_PORT/$TEST_DB_NAME \
                    -user=$TEST_DB_USERNAME \
                    -password=$TEST_DB_PASSWORD \
                    -cleanDisabled="false" \
                    clean
                '''

                echo 'Running database migration...'
                sh '''
                flyway -url=jdbc:postgresql://$TEST_DB_HOST:$TEST_DB_PORT/$TEST_DB_NAME \
                    -user=$TEST_DB_USERNAME \
                    -password=$TEST_DB_PASSWORD \
                    -locations=filesystem:./src/main/resources/db/migration \
                    migrate
                '''
            }
        }

        stage('Test') {
            steps {
                withMaven {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Create GitHub Release') {
            steps {
                script {
                    def response = sh(script: """
                        curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                        -d '{
                        "tag_name": "$RELEASE_TAG",
                        "target_commitish": "main",
                        "name": "$RELEASE_NAME",
                        "body": "$RELEASE_BODY",
                        "draft": false,
                        "prerelease": false
                        }' \
                        https://api.github.com/repos/$GITHUB_REPO/releases
                    """, returnStdout: true).trim()

                    def release = readJSON text: response
                    env.RELEASE_ID = release.id
                }
            }
        }

        stage('Upload .jar to GitHub Release') {
            steps {
                script {
                sh """
                curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @$JAR_FILE_PATH \
                "https://uploads.github.com/repos/$GITHUB_REPO/releases/$RELEASE_ID/assets?name=rest-api-$BUILD_NUMBER.jar"
                """
                }
            }
        }
    }
}