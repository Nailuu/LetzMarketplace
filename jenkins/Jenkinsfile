pipeline {
    agent {
        label 'docker-agent'
    }

    triggers {
        pollSCM('H/3 * * * *')
    }

    environment {
        SPRING_PROFILE = 'test'

        CORS = credentials('CORS')
        JWT_SECRET_KEY = credentials('JWT_SECRET_KEY')

        PROD_DB_HOST = credentials('PROD_DB_HOST')
        PROD_DB_PORT = credentials('PROD_DB_PORT')
        PROD_DB_NAME = credentials('PROD_DB_NAME')
        PROD_DB_USERNAME = credentials('PROD_DB_USERNAME')
        PROD_DB_PASSWORD = credentials('PROD_DB_PASSWORD')

        TEST_DB_HOST = credentials('TEST_DB_HOST')
        TEST_DB_PORT = credentials('TEST_DB_PORT')
        TEST_DB_NAME = credentials('TEST_DB_NAME')
        TEST_DB_USERNAME = credentials('TEST_DB_USERNAME')
        TEST_DB_PASSWORD = credentials('TEST_DB_PASSWORD')

        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        GITHUB_REPO = 'Nailuu/LetzMarketplaceAPI'
        RELEASE_NUMBER = "1.0.${env.BUILD_NUMBER}"
        RELEASE_TAG = "v${env.RELEASE_NUMBER}"
        RELEASE_NAME = "Release v${env.RELEASE_NUMBER}"
        RELEASE_NOTES = "Automated release created by Jenkins pipeline."
        JAR_FILE_NAME = "rest-api-${env.RELEASE_NUMBER}.jar"
        JAR_FILE_PATH = "./target/${env.JAR_FILE_NAME}"

        DOCKER_USERNAME = credentials('DOCKER_USERNAME')
        DOCKER_TOKEN = credentials('DOCKER_TOKEN')
        DOCKER_REPO = credentials('DOCKER_REPO')
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn --version'
                sh 'mvn -B -DskipTests -Drevision=$RELEASE_NUMBER clean package'
            }
        }

        stage('Database Migration') {
            steps {
                sh 'flyway -v'

                echo 'Cleaning database schemas...'
                sh '''
                flyway -url=jdbc:postgresql://$TEST_DB_HOST:$TEST_DB_PORT/$TEST_DB_NAME \
                    -user=$TEST_DB_USERNAME \
                    -password=$TEST_DB_PASSWORD \
                    -cleanDisabled="false" \
                    clean
                '''

                echo 'Running database migration...'
                sh '''
                flyway -url=jdbc:postgresql://$TEST_DB_HOST:$TEST_DB_PORT/$TEST_DB_NAME \
                    -user=$TEST_DB_USERNAME \
                    -password=$TEST_DB_PASSWORD \
                    -locations=filesystem:./src/main/resources/db/migration \
                    migrate
                '''
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('GitHub Release') {
            steps {
                echo 'Creating new GitHub Release ($RELEASE_TAG)'
                sh '''
                gh release create "$RELEASE_TAG" --title "$RELEASE_NAME" --generate-notes --notes "$NOTES"
                gh release edit "$RELEASE_TAG" --notes "$RELEASE_NOTES"
                '''

                echo 'Uploading .jar packaged application to the GitHub Release'
                sh 'gh release upload "$RELEASE_TAG" $JAR_FILE_PATH'
            }
        }

        stage('Dockerize') {
            steps {
                echo 'Building Docker image...'
                sh '''
                docker build \
                --build-arg JAR_FILE_PATH=$JAR_FILE_PATH \
                --build-arg JAR_FILE_NAME=$JAR_FILE_NAME \
                -t $DOCKER_REPO:$RELEASE_NUMBER \
                -t $DOCKER_REPO:latest .
                '''

                echo "Login to Docker Hub"
                sh 'echo $DOCKER_TOKEN | docker login --username $DOCKER_USERNAME --password-stdin'

                echo 'Pushing image to Docker Hub'
                sh '''
                docker push $DOCKER_REPO:$RELEASE_NUMBER
                docker push $DOCKER_REPO:latest
                '''

                echo "Add Docker Hub infos to GitHub Release"
                sh '''
                gh release view "$RELEASE_TAG" --json body | jq -r '.body' > release.txt
                echo "\nDocker Hub: [nailuu/letz-marketplace-api](https://hub.docker.com/r/nailuu/letz-marketplace-api/)" >> release.txt
                echo "Clone using \`docker pull $DOCKER_REPO:$RELEASE_NUMBER\`" >> release.txt
                gh release edit "$RELEASE_TAG" --notes-file release.txt
                '''

                echo 'Clean'
                sh '''
                docker image rm $DOCKER_REPO:$RELEASE_NUMBER
                docker image rm $DOCKER_REPO:latest
                '''
            }
        }
    }
}