pipeline {
    agent {
        label 'docker-agent'
    }

    triggers {
        pollSCM('H/3 * * * *')
    }

    environment {
        CORS = credentials('cors')
        JWT_SECRET_KEY = credentials('jwt_secret_key')
        DB_PORT = credentials('db_port')
        DB_HOST = credentials('db_host')
        DB_NAME = credentials('db_name')
        DB_USERNAME = credentials('db_username')
        DB_PASSWORD = credentials('db_password')
        TEST_DB_PORT = credentials('test_db_port')
        TEST_DB_HOST = credentials('test_db_host')
        TEST_DB_NAME = credentials('test_db_name')
        TEST_DB_USERNAME = credentials('test_db_username')
        TEST_DB_PASSWORD = credentials('test_db_password')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }

        stage('Migrate Database') {
            when {
                expression {
                    def changes = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                    return changes.contains('src/main/resources/db/migration')
                }
            }
            agent {
                docker {
                    image 'postgres:16'
                    args '--network="host"'
                }
            }
            steps {
                echo "SQL schemas changes detected, running migration..."
                sh 'flyway -url=jdbc:postgresql://${TEST_DB_HOST}:${TEST_DB_PORT}/${TEST_DB_NAME} \
                           -user=${TEST_DB_USERNAME} \
                           -password=${TEST_DB_PASSWORD} \
                           -locations=filesystem:./src/main/resources/db/migration \
                           migrate'
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'postgres:16'
                     args '--network="host"'
                }
            }
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
    }
}