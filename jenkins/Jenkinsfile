pipeline {
    agent {
        label 'docker-agent'
    }

    triggers {
        pollSCM('H/3 * * * *')
    }

    environment {
        SPRING_PROFILE = 'test'

        CORS = credentials('CORS')
        JWT_SECRET_KEY = credentials('JWT_SECRET_KEY')

        PROD_DB_HOST = credentials('PROD_DB_HOST')
        PROD_DB_PORT = credentials('PROD_DB_PORT')
        PROD_DB_NAME = credentials('PROD_DB_NAME')
        PROD_DB_USERNAME = credentials('PROD_DB_USERNAME')
        PROD_DB_PASSWORD = credentials('PROD_DB_PASSWORD')

        TEST_DB_HOST = credentials('TEST_DB_HOST')
        TEST_DB_PORT = credentials('TEST_DB_PORT')
        TEST_DB_NAME = credentials('TEST_DB_NAME')
        TEST_DB_USERNAME = credentials('TEST_DB_USERNAME')
        TEST_DB_PASSWORD = credentials('TEST_DB_PASSWORD')

        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        GITHUB_REPO = 'Nailuu/LetzMarketplaceAPI'
        RELEASE_TAG = "v1.0.${env.BUILD_NUMBER}"
        RELEASE_NAME = "Release v1.0.${env.BUILD_NUMBER}"
        RELEASE_NOTES = "Automated release created by Jenkins pipeline."
        JAR_FILE_PATH = "./target/rest-api-${env.BUILD_NUMBER}.jar"
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn --version'
                sh 'mvn -B -DskipTests -Drevision=1.0.$BUILD_NUMBER clean package'
            }
        }

        stage('Database Migration') {
            steps {
                sh 'flyway -v'

                echo 'Cleaning database schemas...'
                sh '''
                flyway -url=jdbc:postgresql://$TEST_DB_HOST:$TEST_DB_PORT/$TEST_DB_NAME \
                    -user=$TEST_DB_USERNAME \
                    -password=$TEST_DB_PASSWORD \
                    -cleanDisabled="false" \
                    clean
                '''

                echo 'Running database migration...'
                sh '''
                flyway -url=jdbc:postgresql://$TEST_DB_HOST:$TEST_DB_PORT/$TEST_DB_NAME \
                    -user=$TEST_DB_USERNAME \
                    -password=$TEST_DB_PASSWORD \
                    -locations=filesystem:./src/main/resources/db/migration \
                    migrate
                '''
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Login to GitHub') {
            steps {
                sh 'echo $GITHUB_TOKEN | gh auth login --with-token'
            }
        }

        stage('Create GitHub Release') {
            steps {
                sh 'gh release create $RELEASE_TAG --title $RELEASE_NAME --generate-notes --notes $RELEASE_NOTES'
            }
        }

        stage('Upload .jar to GitHub Release') {
            steps {
                sh 'gh release upload $RELEASE_TAG $JAR_FILE_PATH'
            }
        }
    }
}